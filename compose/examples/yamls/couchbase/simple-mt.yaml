version: '3.9'
x-omnistrate-service-plan:
  tenancyType: 'OMNISTRATE_MULTI_TENANCY'
services:
  couchserver:
    image: couchbase:enterprise-7.6.1
    restart: always
    ports:
      - '8091:8091'
      - '18091:18091'
      # - '8092:8092'
      # - '8093:8093'
      # - '8094:8094'
      # - '8095:8095'
      # - '8096:8096'
      # - '8097:8097'
      # - '9123:9123'
      # - '11207:11207'
      # - '11210:11210'
      # - '11280:11280'
      - '18092:18092'
      # - '18093:18093'
      # - '18094:18094'
      # - '18095:18095'
      # - '18096:18096'
      # - '18097:18097'
    platform: linux/amd64
    deploy:
      resources:
        limits:
          cpus: '500m'
          memory: 1G
        reservations:
          cpus: '100m'
          memory: 1G
    environment:
      - username=admin
      - password=password
      - CLUSTER_NAME=couchbasecluster
    volumes:
      - source: ./data
        target: /opt/couchbase/var
        type: bind
        x-omnistrate-storage:
          aws:
            instanceStorageType: AWS::EBS_GP3
            instanceStorageSizeGi: 30
            instanceStorageIOPS: 3000
            instanceStorageThroughputMiBps: 125
          gcp:
            instanceStorageType: GCP::PD_BALANCED
            instanceStorageSizeGi: 30
    x-omnistrate-apiparams:
      - key: username
        description: "username of the database"
        value: "admin"
        required: true
        modifiable: true
        defaultValue : "admin"
      - key: password
        description: "password of the database"
        value: "password"
        required: true
        modifiable: true
        defaultValue : "password"
      - key: CLUSTER_NAME
        description: "name of the cluster"
        value: "couchbasecluster"
        required: true
        modifiable: true
        defaultValue : "couchbasecluster"
    x-omnistrate-actionhooks:
      - scope: CLUSTER
        type: INIT
        commandTemplate: |
            set -x
            set +e
                        
            attempt=0
            max_attempts=20
            delay=1

            while [ $attempt -le $max_attempts ]
            do
              # Load CA certs
              echo "Loading CA certs"
              curl -s --fail-with-body -X POST http://{{ $sys.compute.nodes[0].name }}:8091/node/controller/loadTrustedCAs -u {{ $var.username }}:{{ $var.password }}

              # Reload node certs and key
              echo "Reloading node certs and key"
              curl -s --fail-with-body -X POST http://{{ $sys.compute.nodes[0].name }}:8091/node/controller/reloadCertificate -u {{ $var.username }}:{{ $var.password }}
              
              # Init the cluster
              echo "Initializing the cluster"
              curl -s -w '%{http_code}' -m 5 --fail-early http://{{ $sys.compute.nodes[0].name  }}:8091/pools/default -u {{ $var.username }}:{{ $var.password  }}  -o /dev/null | grep -q '200' && echo 'Already configured' || \
              curl --fail-with-body -X POST http://{{ $sys.compute.nodes[0].name }}:8091/clusterInit \
                -d hostname={{ $sys.network.nodes[0].internalEndpoint }} \
                -d username={{ $var.username }} \
                -d password={{ $var.password }} \
                -d sendStats=true \
                -d nodeEncryption='on' \
                -d clusterName={{ $var.clusterName }} \
                -d services='kv,index,n1ql' \
                -d port='SAME'
                
              rc=$?

              if [ $rc -eq 0 ]
              then
                echo "Attempt to install sample bucket..."
                set -e

                curl --fail-with-body -X POST http://{{ $sys.compute.nodes[0].name }}:8091/sampleBuckets/install \
                  -u {{ $var.username }}:{{ $var.password }} \
                  -d '["travel-sample"]'

                echo "Command succeeded."
                exit 0
              else
                echo "Command failed. Retrying in $delay seconds..."
                sleep $delay
              fi

              attempt=$((attempt+1))
              delay=$((delay*2))
            done

            echo "Command failed after $max_attempts attempts."
            exit 1
      - scope: NODE
        type: POST_START
        commandTemplate: | 
            set -x
            set +e

            mkdir -p /opt/couchbase/var/lib/couchbase/inbox/
            mkdir -p /opt/couchbase/var/lib/couchbase/inbox/CA

            #get root cert
            wget -O /opt/couchbase/var/lib/couchbase/inbox/CA/r1.pem https://i.pki.goog/r1.pem

            # Copy the full chain into the CA dir
            cp /etc/tls/tls.crt /opt/couchbase/var/lib/couchbase/inbox/CA/ca.pem

            # Copy the full chain into the node dir
            cp /etc/tls/tls.crt /opt/couchbase/var/lib/couchbase/inbox/chain.pem

            # Copy the node TLS private key
            cp /etc/tls/tls.key /opt/couchbase/var/lib/couchbase/inbox/pkey.key

            ## Post-process the node cert to remove the root CA from the chain
            # File path
            chain="/opt/couchbase/var/lib/couchbase/inbox/chain.pem"

            # Create a temporary directory
            tmp_dir=$(mktemp -d)

            # Split the file
            csplit -f "$tmp_dir/cert" -b "%02d.pem" "$chain" '/-----BEGIN CERTIFICATE-----/' '{*}'

            # Get the total number of certs
            num_certs=$(ls "$tmp_dir" | wc -l)

            # If there are more than one certs, remove the last one
            if [ "$num_certs" -gt 1 ]; then
              rm "${tmp_dir}/cert$(printf "%02d" $((num_certs-1))).pem"
            fi

            # Concatenate the remaining certs back into the chain
            cat "${tmp_dir}/cert"*.pem > "$chain"

            # Clean up
            rm -r "$tmp_dir"
